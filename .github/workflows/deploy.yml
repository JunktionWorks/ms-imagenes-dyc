name: CI/CD ms-imagenes-dyc

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - main

jobs:
  build:
    name: üõ†Ô∏è Build JAR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: |
          chmod +x mvnw
          ./mvnw clean package -DskipTests -B

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar
          path: target/*.jar

  docker:
    name: üê≥ Build & Push Docker
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ms-imagenes-dyc:${{ github.sha }} .

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/ms-imagenes-dyc:${{ github.sha }}

  deploy:
    name: üöÄ Deploy to EC2
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: SSH & Deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 1) Login a Docker Hub (si el repo es privado)
            echo "${{ secrets.DOCKERHUB_TOKEN }}" \
              | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # 2) Pull de la nueva imagen
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ms-imagenes-dyc:${{ github.sha }}

            # 3) Detener y eliminar contenedor anterior
            docker stop ms-imagenes-dyc || true
            docker rm ms-imagenes-dyc   || true

            # 4) Ejecutar contenedor pasando variables para S3
            docker run -d \
              --name ms-imagenes-dyc \
              --restart unless-stopped \
              -p 8082:8082 \
              -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
              -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              -e AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }} \
              -e AWS_REGION=${{ secrets.AWS_REGION }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/ms-imagenes-dyc:${{ github.sha }}
